# DESIGN NOTES

## What is it?
-a simple tool to keep track of turn order in a dnd combat
-not a combat simulator
-not a compendium of info about dnd monsters
-used by DM not visible to players (unless you want?)

## COMBAT SCREEN

### UI Elements

- Combat name (text input): save/load unfinished combats
- Round number (text)
- List of fighters (players + mobs): tracking initiative order, highest roll goes first
    - initiative score (text)
    - fighter name (text)
- Add fighter (button)
    - Fighter initiative score (number input)
    - Fighter Name (string input)
    - confirm button
- Save combat (button)
- Next turn/fighter (button)

__UI Considerations:__ 

*Things you might want to add later*

- Will want to add saved fighters or groups of fighters
- Feature to automatically save combats
- Generate (roll) initiative scores in-app
-allow default names as a shortcut
  -for combats (when saving combat) 
  -for fighters (when inputting name + init score)


## screens required: 

 [ ] home screen:
    - new combat button (shows a modal to get the combat name, saves it and directs you to the combat screen)
    - save combat button (takes you to the combat screen)
    - combatants button (takes you to the combatants screen)

 [ ] Combat screen (the main point of the app): 
    
 [ ] Info screen:
    - user should be able to click on a monster/combatant and pull up a stat block. 
    - maybe this is too extra though, only need data enough to track initiative.
 
 
 [ ] combatants screen:
    - button view prev saved groups
    - button to create a group
    - view list of all saved individual combatants
    - button to add a combatant for use later
    - manage/edit/delete combatants/groups
     
 
 [ ] create a group:
    - name the group
    - save the group
    - search saved individual combatants to add
    - add a new combatant to a group
    - remove a combatant from a group
    - delete the group and go back
    - make a "quick group" of 1-5 or custom
  
    


##Current Tasks:
   [ ] draw out each screen and make a flow chart of possible navigation/flow 
   [ ] get a minimal prototype running + test
   [ ] write tests if that's your thing
   [ ] remove all comments from project

##Completed Tasks:
   [x] remove "console.log(...)" statements in project
   [x] update "tabOptions" to "screenOptions" to get rid of warning
   [x]  install @react-navigation/native-stack
   [x] add stack navigation for when we want to navigate to a screen that doesn't have a tab such as when navigating to InfoView from SearchView
   [x] implement navigation to info screen using stack navigation existing MonsterStatsView component and it works!
##Extra features: 
    - roll random numbers for initiative to speed things up
    - a time tracker to keep track of how much time elapsed


##Bug Tracking:
   [ ] warning: "search" component within "search" component, how to properly nest stack nav inside tab nav?

##Fixed Bugs:
